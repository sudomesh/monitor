#!/usr/bin/env bash

MONITOR_DIR="${BASH_SOURCE%/*}/../"
: "${RELEASE_BRANCH?check_npm_version requires RELEASE_BRANCH}"

help () { cat <<EOF
Check whether the current npm package.json version is allowed.

A version is not allowed if
* There is already a git tag whose name is the same version, and this is not the release branch (whose CI should create that tag)
EOF
}

if [ -z "$MONITOR_DIR" ]; then
    echo "MONITOR_DIR is required"
    exit 1
fi

: ${GIT_REPO_REMOTE?GIT_REPO_REMOTE is required}

git_tag_exists () {
    echo "git_tag_exists GIT_REPO_REMOTE=$GIT_REPO_REMOTE TRAVIS_PULL_REQUEST_SLUG=$TRAVIS_PULL_REQUEST_SLUG"
    echo "GITHUB_SSH_KEY_PRIVATE length=${#GITHUB_SSH_KEY_PRIVATE}"
    if ! [ -z "$GITHUB_SSH_KEY_PRIVATE" ]; then
        echo "ssh-add GITHUB_SSH_KEY_PRIVATE"
        eval $(ssh-agent -s)
        ssh-add - <<< "${GITHUB_SSH_KEY_PRIVATE}"
    fi
    git fetch --tags "$GIT_REPO_REMOTE"
    remote_tag="$(git ls-remote --exit-code --tags "$GIT_REPO_REMOTE" "refs/tags/$1")"
    remote_tag_exit="$?"
    remote_tag_count="$(echo "$remote_tag" | wc -l)"
    
    echo "git-tag-exists 1=$1"
    echo "git-tags=$(git tag -l)"
    echo "remote_tag=$remote_tag"
    echo "remote_tag_count=$remote_tag_count"
    echo "remote_tag_exit=$remote_tag_exit"
    
    if [ "$remote_tag_exit" = "2" ]; then
        # no remotes matched
        return 1
    elif ! [ "$remote_tag_exit" != "0" ]; then
        2>&1 echo "Error fetching git remote tag"
        return "$remote_tag_exit"
    elif [ "0" -eq "$remote_tag_count" ]; then
        return 1
    else
        return 0
    fi
}

main () {
    package_version="$(cat $MONITOR_DIR/package.json | jq -r .version)"
    git_tag="$package_version"
    >&2 echo "check_npm_version git_tag=$git_tag RELEASE_BRANCH=$RELEASE_BRANCH TRAVIS_BRANCH=$TRAVIS_BRANCH TRAVIS_PULL_REQUEST_BRANCH=$TRAVIS_PULL_REQUEST_BRANCH"
    if git_tag_exists "$git_tag" && [ "$(git rev-parse HEAD)" != "$(git show-ref -s refs/tags/$git_tag)" ]; then
        >&2 echo "tag=$package_version already exist. Error. Increase the package.json version to an unused git tag"
        return 1
    else
        >&2 echo "tag not taken for version. Good."
        return 0
    fi
}

main "$@"
